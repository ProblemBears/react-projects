REACT SUMMARY & CORE FEATURES
    -How React Works and                        * A Component is a regular JS function that returns something that can be rendered ( Ex: plain text, but usually JSX (JS HTML) )
     Understanding Components:                  * These components should reside in their own .js files and be exported in a CommonJS style (Ex: export default App;)

    -Building & Re-Using Another                * CONVENTION:   ** Place new .js components in a ./src/components directory
     Component:                                                 ** Component names should start with a capital letter (ex: function SomeComponent() {})

                                                * Import with:  ** import SomeComponent from './components/SomeComponent'
                                                
                                                * THEN:         ** We can use the component with < SomeComponent />

    -Working with "props" &                     * SCENARIO:     ** We need to pass in data to a component (ex: We need different titles for the same component spawned 3 times)
     Dynamic Content:                           
                                                * HOW:          ** Pass the values by defining attributes (they can be any name)
                                                                        *** < SomeComponent someAttrib1="someVal" someAttrib2="SomeVal" />
                                                                ** Accept the attributes by defining a props parameter in your component.
                                                                        *** function SomeComponent(props) {} //props has those attributes as properties
                                                                ** To use the properties we can't simply use props.someAttrib1 in JSX. WE HAVE TO WRAP DYNAMIC
                                                                   CONTENT FROM JavaScript WITH {}

    -Handling Events:                           * SCENARIO:     ** We need to listen to a click on a Components button

                                                * HOW:          ** PREREQ: The HTML elements in REACT are really just REACT components built into it
                                                                ** The previous statement matters because we can add built-in attributes that don't exist in HTML
                                                                   such as the:          onClick={ someFunctionDefinedElsewhere} //don't use () because it'll execute

                                                * USEFUL:       ** For functions that need to reference properties from props. You should define them inside of
                                                                  the main Component.

    -Introducing State:                         * SCENARIO:     ** In order to change what's visible on the screen we need to change the State (ex: overlay open/closed)
                                                
                                                * HOW:          1) Import the function:     ** import {useState} from 'react';

                                                                2) To ready the state,      ** Think of React State as a variable, managed by React.
                                                                   the following is         ** const [modalIsOpen, setModalIsOpen] = useState(false);
                                                                   inserted at the                      *** Initial Value = false
                                                                   start of the                         *** Destructured [0] = The currently stored value
                                                                   Component Function:                  *** Destructured [1] = A function that allows you to change [0]
                                                                                                                **** We choose to call [1] instead of directly changing
                                                                                                                     [0] because [1] reexecutes all of the Component
                                                                                                                     function (hence, rerenders)
                                                                                            ** Finally, after destructuring/naming the bidnings that were yielded by
                                                                                               useState. Maybe on an onClick's handler function we can do:
                                                                                                            setModalIsOpen(true);
                                                                                               and somwhere in our return() statement we can use modalIsOpen with
                                                                                               a conditional statement like the ternary (?:) in order to render some
                                                                                               Components OR render null.

    -Working w/ "Event Props"                   * SCENARIO:     ** Previously we used the JSX attribute onClick to Handle the event of clicking on a JSX Button.
     (Passing Function As Props):                                  WE CAN NOT USE onClick on SELF MADE COMPONENTS AND EXPECT IT TO WORK because onClick is built into
                                                                   JSX. We need to do something with the Function Pointer that was passed in props.

                                                * HOW:          ** Our Self-Made Component may have a return statement that returns JSX, therefore, in it's
                                                                    onClick that is built-in, we can call our props.onClick (remember though, onClick is just the name
                                                                    of the attribute we sent via our props, it does not have to be named onClick because it's not 
                                                                    built-in)

   -Adding Routing:                             * DEFINITION    ** A special tool that watches changes in the URL and changes what's rendered on the screen based
                                                  OF ROUTING:      on the URL change.

                                                * INSTALLATION: ** npm install react-router-dom

                                                * CONVENTION:   ** Put Components that signify pages that will be loaded in a ./src/pages directory
                                                                ** Append "Page" in the name of the function that signifies a component. To make clear it's a Page Component.

                                                * HOW:          1) To initialize a URL to be watched, in index.js (the location where we link React to the DOM) we:
                                                                     ** import { BrowserRouter } from 'react-router-dom'
                                                                     ** Then wrap our < App/> with <BrowserRouter> </BrowserRouter>

                                                                2) Now we need to define the different URLS and which pages they load:
                                                                     ** import { Routes, Route } from 'react-router-dom' 
                                                                        in the .js file of the element that was wrapped (<App />)
                                                                     ** The Route component defines different paths in the URL we want to listen to and which Component
                                                                        should be loaded for these different paths. So also import all your Page Components.
                                                                     ** Finally:
                                                                           Wrap <Route> tags with <Routes> and for each <Route> tag we insert a page in the format:
                                                                           <Route path="/somePath" element={<SomePage />} /> where somePath can be named anything, and
                                                                           SomePage can be any page you want to render on this path
                                                                                 ** We can add an 'exact' attribute to <Route> which prevents it from stopping to check
                                                                                    for an exact match once a prefix type match is seen. (useful on "/" since it
                                                                                    would prevent the search for a whole path since it stops at /)

   -Adding Links & Navigation:                  * SCENARIO:    ** Now that we have our Router working we don't want to have to navigate via the URL bar. Therefore,
                                                                  we want to add a navigation bar that Links to these different paths. The regular <a> tag may work but
                                                                  it would reload the page. This is why we wrap our links with <Link></Link> instead of <a>

                                                * HOW:         1) import { Link } from "react-router-dom"; //In a new Component .js representing the NavBar
                                                               2) <Link to="/"> SomeText </Link> //where to should link to paths we specified in our <Routers>
                                                               3) Import and Add this new NavBar Component Above our <Routes> in <App>

   -Styling w/ CSS Modules:                     * SCENARIO:    ** We want to pair a .css file with a specific REACT component. This is useful when we don't want
                                                                  the CSS linked into the HTML to be global (which may be large) 

                                                * HOW:         1) Name the CSS file as follows:    ComponentsName.module.css     //and put it in the same directory
                                                               2) import someName from "./ComponentsName.module.css"
                                                                        ** Here someName is a JS object where all the CSS classes defined in the .css file are contained
                                                                           as properties
                                                               3) In element attributes do:     className={someName.classSelector}

   -Output Lists of Data:                       * HOW:         ** Use an array's builtin map()
                                                               ** But we get a console error that says each child in a list should have a unique "key" prop. So fix w/:
                                                                        key={element.id}     //as an attribute to what you're returning

   -Building Wrapper Components                 * SCENARIO:    ** We don't want to make individual module.css styles for each component. If we want to share styles
    w/ props.children:                                            it would be ideal to create a Wrapper Component to do it. This wrapper would have a singular module.css
                                                                  that it would share to things that gets wrapped onto it like <div></div>

                                                * HOW:         1) Create the directory:         ./src/components/ui
                                                                     ** This is where our Wrapper Components for UI will reside.
                                                               2) Create a regular Component that returns the following:
                                                                     return ( 
                                                                     <div className={classes.card}>
                                                                        {props.children}
                                                                     </div>
                                                                     )
                                                                     ** WE NEED TO SPECIFY props.children here because UNLIKE PASSING THROUGH ATTRIBUTES. THIS
                                                                        TIME WE PASSED BY WRAPPING TAGS WITH THIS WRAPPER TAG
                                                                     *** EX: Our Wrapper class that returns the thing above is called Card.
                                                                             In some Component that uses this wrapper. It would use it as follows:
                                                                                 <Card> 
                                                                                    <div><button></button><img></div> 
                                                                                 </Card>
                                                                             Where the stuff that tags that get wrapped by <Card> go into props.children
                                                               3) Wrap whatever you need to have that consistent style with the Wrapper Component.

   -Adding a Form:                              * SCENARIO:   ** We don't display things based on dummy code. Instead we usually submit things to a server using a form
                                                                 and that server stores that submission in a database so that we could later retrieve it for display.

                                                * EXAMPLE:     ** Here is how we might build a Form Component in REACT:
                                                                        <Card>
                                                                           <form className={classes.form}>
                                                                              <div className={classes.control}>
                                                                                 <label htmlFor="title">Meetup Title</label>
                                                                                 <input type="text" required id="title" />
                                                                              </div>
                                                                              <div className={classes.control}>
                                                                                 <label htmlFor="image">Meetup Title</label>
                                                                                 <input type="url" required id="image" />
                                                                              </div>
                                                                              <div className={classes.control}>
                                                                                 <label htmlFor="address">Address</label>
                                                                                 <input type="url" required id="address" />
                                                                              </div>
                                                                              <div className={classes.control}>
                                                                                 <label htmlFor="description">Description</label>
                                                                                 <textarea id="description" required rows="5"></textarea>
                                                                              </div>
                                                                              <div className={classes.actions}>
                                                                                 <button>Add Meetup</button>
                                                                              </div>
                                                                           </form>
                                                                     </Card>
                                                                     *** Notice the <Card> wrapper we created previously.
                                                                     *** A button in a form calls the onSubmit event when it is clicked (catchable w/ onSubmit)

   -Getting User Input &                        *HOW:          ** To handle form submission we have to do 3 things:
    Handling Form Submission:                                        1) Listen to the form submission
                                                                              ** In the <form> tag add the attribute - onSubmit={someFunc}
                                                                     2) Prevent the browser default (which sends an http request automatically, hence reloading)
                                                                              ** In the handler function do - e.preventDefault();
                                                                     3) Read the form values
                                                                              ** Refs: References to DOM elements
                                                                              ** To make connections between bindings and JSX elements we do:
                                                                                    a) import { useRef } from 'react';
                                                                                    b) const titleInputRef = useRef(); //You can define more than one as needed
                                                                                    c) <input type='text' id='title' ref={titleInputRef}>
                                                                              ** Finally we can make bindings of the final result of the refs with
                                                                                 someRef.current.value and put all of them into an object with keys and these Refs
                                                                                 as values.

   -Preparing the App for HTTP:                 *SCENARIO:     ** We don't want any sensitive data interaction to be wired into the client-side. We should therefore make
                                                                  requests to server-side APIS
                                                
                                                *HOW:          ** Here we'll use Google Firebase to act as a dummy server
                                                                  To do this we go to Project Shortcuts > Realtime Database > Keep Defaults (except Test Mode)
                                                                  and copy the URL

   -Sending a POST Request:                     *HOW:          ** We can use the fetch() function (a builtin JS function) (we could install the library axios)
                                                               ** So in our SubmitHandler() function we do:
                                                                     1) fetch('URL') //By default fetch sends a GET Request
                                                                           **Firebase creates new tables based on things you append after the URL
                                                                           **Firabse requires you add .json at the end of the link
                                                                     2) TO SET IT AS A POST REQUEST WE ADD THE FOLLOWING SECOND ARGUMENT
                                                                        fetch('URL', 
                                                                              {
                                                                                 method: 'POST', 
                                                                                 body: JSON.stringify(meetupData),
                                                                                 headers: { 'Content-Type': 'application/json'}
                                                                              }
                                                                        );
                                                               ** Check firebase and the data should be there

   -Navigating Programmatically:                *SCENARIO:     ** To give the user feedback that the prior POST Request worked we probably may want to navigate
                                                                  away from the page. To do this we trigger navigation Programmatically as opposed to when we clicked
                                                                  nav links in our nav bar

                                                *HOW:          1) import { useNavigate } from 'react-router-dom'

                                                               2) const navigate  = useNavigate(); //an objects that allows us to manipulate the browser history

                                                               3) Since fetch returns a promise we can use then() as follows:
                                                                     fetch(//our previous code).then( () => { navigate('/') } )
                                                                  Which replaces the current Route Link witht he Home Link AFTER the fetch request succeeds 